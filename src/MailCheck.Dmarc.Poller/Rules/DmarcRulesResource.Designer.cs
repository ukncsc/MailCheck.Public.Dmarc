//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.Dmarc.Poller.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DmarcRulesResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DmarcRulesResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.Dmarc.Poller.Rules.DmarcRulesResource", typeof(DmarcRulesResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record length should be less than or equal to {0} characters. This record has {1} characters..
        /// </summary>
        public static string MaxLengthOf450CharactersErrorMessage {
            get {
                return ResourceManager.GetString("MaxLengthOf450CharactersErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No DMARC record configured..
        /// </summary>
        public static string NoDmarcErrorMessage {
            get {
                return ResourceManager.GetString("NoDmarcErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A domain should have only 1 DMARC record..
        /// </summary>
        public static string OnlyOneDmarcRecordErrorMessage {
            get {
                return ResourceManager.GetString("OnlyOneDmarcRecordErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record must contain a policy (p) tag..
        /// </summary>
        public static string PolicyTagMustExistErrorMessage {
            get {
                return ResourceManager.GetString("PolicyTagMustExistErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mailto:dmarc-rua@dmarc.service.gov.uk.
        /// </summary>
        public static string RuaMailbox {
            get {
                return ResourceManager.GetString("RuaMailbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The report aggregate URIs tag (rua) has duplicate URIs. Consider removing the duplicate entries from the rua tag..
        /// </summary>
        public static string RuaTagShouldNotContainDuplicateUrisErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotContainDuplicateUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aggregate report URI tag (rua) is misconfigured. Mail Check only processes aggregate reports sent to {0}. Update the rua value to `{1}`..
        /// </summary>
        public static string RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 2 aggregate report URIs (rua) are guaranteed to have reports delivered. This record has {0}..
        /// </summary>
        public static string RuaTagShouldNotHaveMoreThanTwoUrisErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotHaveMoreThanTwoUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only URIs with mailto: scheme are guaranteed to have aggregate reports delivered. This record has non mailto: scheme URIs in its aggregate report URI tag (rua)..
        /// </summary>
        public static string RuaTagsShouldBeMailToErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagsShouldBeMailToErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check can only provide email reporting if the aggregate report URI tag (rua) includes the {0} mailbox. Consider adding `{1}` to the rua tag values..
        /// </summary>
        public static string RuaTagsShouldContainDmarcServiceMailBoxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagsShouldContainDmarcServiceMailBoxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only URIs with mailto: scheme are guaranteed to have forensic reports delivered. This record has non mailto: scheme URIs in its forensic report URI tag (ruf)..
        /// </summary>
        public static string RufTagShouldBeMailToErrorMessage {
            get {
                return ResourceManager.GetString("RufTagShouldBeMailToErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The report forensic URIs tag (ruf) has duplicate URIs. Consider removing the duplicate entries from the ruf tag. .
        /// </summary>
        public static string RufTagShouldNotContainDuplicateUrisErrorMessage {
            get {
                return ResourceManager.GetString("RufTagShouldNotContainDuplicateUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 2 forensic report URIs (ruf) are guaranteed to have reports delivered. This record has {0}..
        /// </summary>
        public static string RufTagShouldNotHaveMoreThanTwoUrisErrorMessage {
            get {
                return ResourceManager.GetString("RufTagShouldNotHaveMoreThanTwoUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified sub-domain policy (sp) is ineffective because {0} is not an organisational domain..
        /// </summary>
        public static string SubDomainIneffectualErrorMessage {
            get {
                return ResourceManager.GetString("SubDomainIneffectualErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DMARC behaviour for domains that appear on the Public Suffix List is weakly defined. Because {0} is on the Public Suffix List, you may experience unexpected results..
        /// </summary>
        public static string TldDmarcWeaklyDefinedMessage {
            get {
                return ResourceManager.GetString("TldDmarcWeaklyDefinedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to First tag should be version (v=DMARC1) but was {0}..
        /// </summary>
        public static string VersionMustBeFirstTagErrorMessage {
            get {
                return ResourceManager.GetString("VersionMustBeFirstTagErrorMessage", resourceCulture);
            }
        }
    }
}
