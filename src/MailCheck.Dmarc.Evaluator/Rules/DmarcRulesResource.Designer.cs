//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.Dmarc.Evaluator.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DmarcRulesResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DmarcRulesResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.Dmarc.Evaluator.Rules.DmarcRulesResource", typeof(DmarcRulesResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dmarc-rua.mailcheck.service.ncsc.gov.uk.
        /// </summary>
        internal static string AllowedRuaDomain {
            get {
                return ResourceManager.GetString("AllowedRuaDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This should be investigated to identify if it&apos;s the result of spoofed email, or a change to legitimate email use that requires SPF/DKIM configuration e.g. using a new provider..
        /// </summary>
        internal static string InvestigateRejectedEmailsOnDomainsWithRejectPolicy {
            get {
                return ResourceManager.GetString("InvestigateRejectedEmailsOnDomainsWithRejectPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It&apos;s been over a month since your last change affecting DMARC. You should have enough information from aggregate reporting to either improve your SPF/DKIM configuration or proceed to p=quarantine.
        /// </summary>
        internal static string NudgeAlongFromPolicyOfNoneMessage {
            get {
                return ResourceManager.GetString("NudgeAlongFromPolicyOfNoneMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a percent value (pct) of 100 will apply DMARC policy to all messages. Consider changing percent value from {0} to 100..
        /// </summary>
        internal static string PctValueShouldBe100ErrorMessage {
            get {
                return ResourceManager.GetString("PctValueShouldBe100ErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On {0} {1}% of email was rejected..
        /// </summary>
        internal static string PercentageOfRejectedEmailsOnDate {
            get {
                return ResourceManager.GetString("PercentageOfRejectedEmailsOnDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a policy (p) of Quarantine or Reject will protect recipients from spoofed email. Consider changing policy from {0} to Quarantine or Reject..
        /// </summary>
        internal static string PolicyShouldBeQuarantineOrRejectErrorMessage {
            get {
                return ResourceManager.GetString("PolicyShouldBeQuarantineOrRejectErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mailto:dmarc-rua@dmarc.service.gov.uk.
        /// </summary>
        internal static string RuaMailbox {
            get {
                return ResourceManager.GetString("RuaMailbox", resourceCulture);
            }
        }

        internal static string VerificationRuaMailbox {
            get {
                return ResourceManager.GetString("VerificationRuaMailbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The report aggregate URIs tag (rua) has duplicate URIs. Consider removing the duplicate entries from the rua tag..
        /// </summary>
        internal static string RuaTagShouldNotContainDuplicateUrisErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotContainDuplicateUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aggregate report URI tag (rua) is misconfigured. Mail Check only processes aggregate reports sent to {0}. Update the rua value to `{1}`..
        /// </summary>
        internal static string RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check can only provide email reporting if the aggregate report URI tag (rua) includes the {0} mailbox. Consider adding `{1}` to the rua tag values..
        /// </summary>
        internal static string RuaTagsShouldContainDmarcServiceMailBoxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagsShouldContainDmarcServiceMailBoxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We no longer collect forensic reports, consider removing our address from the ruf field..
        /// </summary>
        internal static string RufTagShouldNotContainDmarcServiceMailBoxErrorMessage {
            get {
                return ResourceManager.GetString("RufTagShouldNotContainDmarcServiceMailBoxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This domain is covered by a policy or subdomain policy of quarantine or reject, but it has no SPF record. This may cause emails to be dropped unless they are signed using DKIM. If this is intended you should consider putting in a reject all SPF record.
        /// </summary>
        internal static string ShouldHaveSpfRecordWIthPolicyOfQuarantineOrReject {
            get {
                return ResourceManager.GetString("ShouldHaveSpfRecordWIthPolicyOfQuarantineOrReject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a sub domain policy (sp) of Quarantine or Reject will protect recipients from spoofed email. Consider changing sub domain policy from {0} to Quarantine or Reject..
        /// </summary>
        internal static string SubdomainPolicyMustBeQuarantineOrRejectErrorMessage {
            get {
                return ResourceManager.GetString("SubdomainPolicyMustBeQuarantineOrRejectErrorMessage", resourceCulture);
            }
        }
    }
}
