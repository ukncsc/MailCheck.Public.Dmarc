//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.Dmarc.Evaluator.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DmarcRulesMarkDownResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DmarcRulesMarkDownResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.Dmarc.Evaluator.Rules.DmarcRulesMarkDownResource", typeof(DmarcRulesMarkDownResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Investigate the source of these emails to identify if it&apos;s the result of an attack, if so then the recipients should be protected by your DMARC policy and no further action is required.
        ///
        ///Alternatively if it is legitimate email, you will require changes to your SPF and DKIM configuration..
        /// </summary>
        internal static string InvestigateRejectedEmailsOnDomainsWithRejectPolicy {
            get {
                return ResourceManager.GetString("InvestigateRejectedEmailsOnDomainsWithRejectPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are not applying this DMARC policy to all of your email, therefore {0}% will:
        ///
        ///- not be validated against SPF and DKIM.
        ///- be delivered to users if your policy is quarantine.
        ///- be quarantined if your policy is reject.
        ///- be randomly chosen from email sent by your organisation or by attackers.
        ///
        ///Increase the percentage value to 100% as soon as you have confirmed that legitimate email has been sucessfully delivered..
        /// </summary>
        internal static string PctValueShouldBe100ErrorMessage {
            get {
                return ResourceManager.GetString("PctValueShouldBe100ErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On {0} over {1}% of your email was not delivered to end users..
        /// </summary>
        internal static string PercentageOfRejectedEmailsOnDate {
            get {
                return ResourceManager.GetString("PercentageOfRejectedEmailsOnDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Now you have enabled DMARC in monitoring mode with a policy of none, you will start receiving reports from mail servers across the globe.
        ///
        ///Identify your legitimate senders from these reports and add them to your SPF record and/or enable DKIM signing.
        ///
        ///Once all of your untrusted email looks like spam you are ready to change your policy to quarantine or reject..
        /// </summary>
        internal static string PolicyShouldBeQuarantineOrRejectErrorMessage {
            get {
                return ResourceManager.GetString("PolicyShouldBeQuarantineOrRejectErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This DMARC record includes the same aggregate reporting destination twice in the rua tag, the duplicate entry should be removed.
        ///
        ///`dmarc record with duplicate removed`.
        /// </summary>
        internal static string RuaTagShouldNotContainDuplicateUrisErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotContainDuplicateUrisErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your DMARC record contains the wrong email address for Mail Check aggregate report processing.
        ///
        ///Please change your DMARC record to be:
        ///
        ///`{0}`.
        /// </summary>
        internal static string RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagShouldNotHaveMisconfiguredMailCheckMailboxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DMARC record does not contain the NCSC Mail Check email address, it&apos;s fine to use other tools but be aware that we won&apos;t be able to help you investigate email abuse, and you won&apos;t see any reporting in Mail Check.
        ///
        ///If you would like Mail Check to receive a copy of your reports, then please change your record to:
        ///
        ///`{0}`.
        /// </summary>
        internal static string RuaTagsShouldContainDmarcServiceMailBoxErrorMessage {
            get {
                return ResourceManager.GetString("RuaTagsShouldContainDmarcServiceMailBoxErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subdomain policy on this organizational domain is set to none, this means that any subdomain can be spoofed by attackers.
        ///
        ///If you have a manageable number of subdomains you may wish to create a DMARC policy of p=none on those subdomains and remove the sp policy,
        ///when the sp tag is removed, the main policy applies to all subdomains. This will protect you from spoofing of non existent subdomains.
        ///
        ///[Read more about the p and sp tag in the DMARC RFC](https://tools.ietf.org/html/rfc7489#section-6.3).
        /// </summary>
        internal static string SubdomainPolicyMustBeQuarantineOrRejectErrorMessage {
            get {
                return ResourceManager.GetString("SubdomainPolicyMustBeQuarantineOrRejectErrorMessage", resourceCulture);
            }
        }
    }
}
